package TileMap;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.imageio.ImageIO;

import Main.GamePanel;

public class TileMap {
	
	private double x;
	private double y;
	
	private double xmax;
	private double xmin;
	private double ymax;
	private double ymin;
	private double tween;
	
	private int[][] map;
	private int tileSize;
	private int numRows;
	private int numCols;
	private int ancho;
	private int alto;
	
	private BufferedImage tileset;
	private int numTilesAcross;
	private Tile[][] tiles;
	
	private int rowOffset;
	private int colOffset;
	private int rowsToDraw;
	private int colsToDraw;
	
	public TileMap(int tilesize) {
		this.tileSize = tilesize;
		rowsToDraw = GamePanel.HEIGHT / tileSize;
		colsToDraw = GamePanel.WIDTH / tileSize;
		tween = 0.07;
	}
	
	public void loadTiles(String s) {
		
		try {
			
			tileset  = ImageIO.read(getClass().getResourceAsStream(s));
			numTilesAcross = tileset.getWidth() / tileSize;
			tiles = new Tile[2][numTilesAcross];
			
			BufferedImage subimage;
			for(int col=0; col<numTilesAcross; col++) {
				subimage = tileset.getSubimage(col*tileSize, 0, tileSize, tileSize);
				tiles[0][col] = new Tile(subimage, Tile.NORMAL);
				subimage = tileset.getSubimage(col*tileSize, tileSize, tileSize, tileSize);
				tiles[1][col] = new Tile(subimage, Tile.BLOCKED);
				
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void loadMap(String s) {
		
		try {
			
			InputStream in = getClass().getResourceAsStream(s);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			
			numCols = Integer.parseInt(br.readLine());
			numRows = Integer.parseInt(br.readLine());
			map = new int[numRows][numCols];
			
			width = numCols * tileSize;
			heigth = numRows * tileSize;
			
			
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	

}
